// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: feed_user.sql

package database

import (
	"context"
)

const deleteFollow = `-- name: DeleteFollow :exec
delete from feed_user where id = $1
`

func (q *Queries) DeleteFollow(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, id)
	return err
}

const followFeed = `-- name: FollowFeed :one
INSERT INTO feed_user (user_id, feed_id, updated_at)
VALUES($1, $2, now())
RETURNING id, user_id, feed_id, created_at, updated_at
`

type FollowFeedParams struct {
	UserID int32
	FeedID int32
}

func (q *Queries) FollowFeed(ctx context.Context, arg FollowFeedParams) (FeedUser, error) {
	row := q.db.QueryRowContext(ctx, followFeed, arg.UserID, arg.FeedID)
	var i FeedUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllFollows = `-- name: GetAllFollows :many
select id, user_id, feed_id, created_at, updated_at from feed_user where user_id = $1
`

func (q *Queries) GetAllFollows(ctx context.Context, userID int32) ([]FeedUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedUser
	for rows.Next() {
		var i FeedUser
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
